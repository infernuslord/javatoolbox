<?xml version="1.0"?>

<!-- build.xml for toolbox -->

<project name="toolbox" default="all" basedir=".">

    <description>
        Java Toolbox
    </description>

    <!--=============================-->
    <!--            PREP             -->
    <!--=============================-->
    <target name="prep">

        <tstamp/>

        <!-- Directories hanging off of root -->
        <property name="top"        value="."/>
        <property name="src"        value="${top}/src"/>
        <property name="dist"       value="${top}/dist"/>
        <property name="debug"      value="${top}/debug"/>
        <property name="classes"    value="${top}/classes"/>
        <property name="resources"  value="${top}/resources"/>
        <property name="targets"    value="${top}/targets"/>
        <property name="lib"        value="${top}/lib"/>
        <property name="test"       value="${top}/test"/>
        <property name="build"      value="${top}/build"/>
        <property name="doc"        value="${top}/doc"/>
        
        <!-- Directories in /build -->
        <property name="build.lib"   value="${build}/lib"/>
        <property name="build.conf"  value="${build}/conf"/>
        <property name="build.stage" value="${build}/stage"/>
        
        <!-- Directories in /doc -->
        <property name="javadoc"    value="${doc}/api"/>
        <property name="clover"     value="${doc}/clover"/>        
        <property name="junit"      value="${doc}/junit"/>
        <property name="statcvs"    value="${doc}/statcvs"/>
        <property name="checkstyle" value="${doc}/checkstyle"/>
        
        <!-- Directories in /doc/junit -->
        <property name="junit.xml"  value="${junit}/xml"/>
        <property name="junit.html" value="${junit}/html"/>
        
        <property name="project.init.message" 
                  value="${ant.project.name} project initialized"/>

        <!-- OS specific properties -->
        <property environment="env"/>
        <condition property="os.type" value="unix">
            <os family="unix"/>
        </condition>
        <property name="os.type" value="windows"/>

        <!-- set standard properties -->
        <property name="javavm" value="1.2"/>
        
        <!-- Compiler Settings -->
        <property name="build.compiler.fulldepend" value="true"/>
        <property name="project.failonerror"       value="true"/>
        <property name="project.debug"             value="on"/>
        <property name="project.optimize"          value="on"/>
        
        <!-- property name="build.compiler" value="jikes"/ -->        
        
        <!-- classpath for building the source -->
        <path id="project.class.path">
            <fileset dir="${lib}">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
            <pathelement location="${resources}"/>
        </path>

        <property name="project.classpath" refid="project.class.path"/>

        <echo message="${os.name} ${os.arch} ${os.version}"/>
        <echo message="environment prepared on ${os.type} "/>
    </target>


    <!--=============================-->
    <!--             INIT            -->
    <!--=============================-->
    <target name="init" depends="prep">
    
        <echo message="Environment complete on ${os.type}"/>
        <echo message="${ant.project.name} environment configured"/>
    
        <mkdir dir="${dist}"/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${build.stage}"/>
        
        <echo message="${project.init.message}"/>
    </target>


    <!--=============================-->
    <!--             ALL             -->
    <!--=============================-->
    <target name        = "all" 
            depends     = "init,compile,jar,dist" 
            description = "Builds everything! (init, compile, jar, dist)">
       
        <echo message="All Done!"/>      
    </target>


    <!--=============================-->
    <!--            CLEAN            -->
    <!--=============================-->
    <target name        = "clean" 
            depends     = "init" 
            description = "Removes files generated by the build process">
        
        <echo message="Cleaning..."/>
            
        <delete dir="${classes}"           verbose="false" quiet="off"/>
        <delete dir="${build.stage}"       verbose="false" quiet="off"/>
        <delete file="${dist}/toolbox.jar" verbose="false" quiet="off"/>

        <!-- skip the XSL-FO jar -->
        
        <!--antcall target="clover.clean"-->
        
    </target>


    <!--=============================-->
    <!--           COMPILE           -->
    <!--=============================-->
    <target name        = "compile" 
            depends     = "init" 
            description = "Compiles the source code">
    
        <echo message="Compiling..."/>
    
        <property name="cp" refid="project.class.path"/>

        <!-- Prints out the classpath -->        
        <script language="beanshell"> <![CDATA[
            print("[CLASSPATH]");
            sb = new StringBuffer();
            cp = toolbox.getProperty("cp");
            for (t = new StringTokenizer(cp, File.pathSeparator); t.hasMoreTokens(); )
                sb.append(t.nextToken() + System.getProperty("line.separator"));
            print(sb.toString());
        ]]></script>
        
        <javac 
            destdir     = "${classes}" 
            debug       = "${project.debug}" 
            optimize    = "${project.optimize}" 
            target      = "${javavm}" 
            fork        = "no"
            failonerror = "${project.failonerror}">
            
            <src path="${src}"/>
            <src path="${debug}"/>
            <classpath refid="project.class.path"/>
        </javac>
    </target>


    <!--=============================-->
    <!--             JAR             -->
    <!--=============================-->
    <target name        = "jar" 
            depends     = "compile" 
            description = "Creates an executable jar">

        <echo message="Jarring..."/>
        
        <mkdir dir="${build.stage}/toolbox"/>
        <delete file="${dist}/toolbox.jar" verbose="false" quiet="off"/>
        
        <!-- Unjar all jars to staging area -->
        <unjar dest="${build.stage}/toolbox" overwrite ="false">

            <fileset dir="${lib}">
                <include name="log4j.jar"/>
                <include name="jode.jar"/>
                <include name="jreversepro.jar"/>
                <include name="junit.jar"/>
                <include name="xml-apis.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="xom.jar"/>
                <include name="jedit-syntax.jar"/>
                <include name="multivalent.jar"/>
                
                <!-- Doc viewer plugin -->
                <include name="webwindow.jar"/>
                <include name="calphahtml.jar"/>
                <include name="jaxen.jar"/>
                <include name="pollo.jar"/>
                <include name="javassist.jar"/>
                
                <!-- ===== Apache Commons ===== -->
                <include name="commons-cli.jar"/>
                <include name="commons-lang.jar"/>
                <include name="commons-beanutils.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-net.jar"/>
                <include name="commons-io.jar"/>
                <include name="commons-codec.jar"/>
                <include name="jakarta-regexp.jar"/>
                
                <!-- ===== Log4j IM Appenders ==== -->
                <include name="hamsam.jar"/>
                <include name="jaimlib.jar"/>
                
            </fileset>
        </unjar>    

        <!-- Copy toolbox class files to staging area -->
        <copy todir="${build.stage}/toolbox" overwrite="yes">
        
            <fileset 
                dir="${classes}" 
                includes="**/*.class"
                excludes="**/MANIFEST.MF,**/test/**"/>
                
            <fileset 
                dir="${resources}" 
                excludes="**/test/**,skinlf/**"/>
        </copy>

        <!-- Jar up staging area to produce toolbox.jar -->                    
        <jar jarfile="${dist}/toolbox.jar" 
             manifest="${src}/META-INF/MANIFEST.MF"
             compress="yes">
            
            <!-- The INDEX.LIST file from xom.jar somehow confuses the   -->
            <!-- Class-Path directive in the manifest so it is excluded  -->
            <!-- for this reason.                                        -->
            <fileset dir="${build.stage}/toolbox" 
                     excludes="META-INF/INDEX.LIST"/>
        </jar>

    </target>

    <!--=============================-->
    <!--        JAR-LOOKANDFEEL      -->
    <!--=============================-->
    <target name        = "jar-lookandfeel" 
            depends     = "init" 
            description = "Creates toolbox-lookandfeel.jar which contains all the non-essential Swing Look and Feels.">

        <delete verbose="true" failonerror="false" >
            <fileset dir="${dist}" includes="toolbox-lookandfeel.jar"/>
            <fileset dir="${build.stage}/lookandfeel"/>
        </delete>

        <mkdir dir="${build.stage}/lookandfeel"/>
        
        <!-- Unjar all jars to staging area -->
        <unjar dest="${build.stage}/lookandfeel" overwrite="true">
            <fileset dir="${lib}">
            
                <!-- ===== Look and Feels ==== -->                    
                <include name="looks.jar"/>
                <include name="kunststoff.jar"/>
                <include name="xplookandfeel.jar"/>
                <include name="metouia.jar"/>
                <include name="tinylaf.jar"/>
                <include name="skinlf.jar"/>
                <include name="toniclf.jar"/>
                <include name="liquidlf.jar"/>
                <include name="hippolf.jar"/>
                <include name="alloy.jar"/>
                <include name="oyoahalf.jar"/>
                
            </fileset>
        </unjar>    

        <!-- Copy skinlf themepacks -->
        <copy todir="${build.stage}/lookandfeel" overwrite="yes">
            <fileset dir="${resources}" includes="skinlf/*"/>
        </copy>

        <!-- Nuke the META-INF dir cause it just causes problems -->
        <delete dir="${build.stage}/lookandfeel/META-INF" verbose="true"/>

        <!-- Jar up staging area to produce toolbox-lookandfeel.jar -->                    
        <jar jarfile ="${dist}/toolbox-lookandfeel.jar" 
             compress="yes">
            <fileset dir="${build.stage}/lookandfeel"/>
        </jar>

    </target>


    <!--=============================-->
    <!--        JAR-XSLFO            -->
    <!--=============================-->
    <target name        = "jar-xslfo" 
            depends     = "init" 
            description = "Creates toolbox-xslfo.jar which contains all the necessary jars to load the XSL-FO plugin.">

        <delete verbose="true">
            <fileset dir="${dist}" includes="toolbox-xslfo.jar"/>
        </delete>

        <mkdir dir="${build.stage}/xslfo"/>
        
        <!-- Unjar all jars to staging area -->
        <unjar dest="${build.stage}/xslfo" overwrite="true">

            <fileset dir="${lib}">
            
                <!-- ===== XSL-FO Plugin Dependencies ==== -->
                <include name="fop.jar"/>
                <include name="batik.jar"/>                
                <include name="acrobat.jar"/>
                <include name="avalon-framework.jar"/>                 
                <include name="apple-mrj.jar"/>
                <include name="xep.jar"/>
                <include name="xt.jar"/>                 
                <include name="saxon.jar"/>
                <include name="cryptix32.jar"/>
                <include name="cryptix32-pgp.jar"/>
                
            </fileset>
        </unjar>    

        <!-- Jar up staging area to produce toolbox-xslfo.jar -->                    
        <jar jarfile ="${dist}/toolbox-xslfo.jar" 
             compress="yes">
            <fileset dir="${build.stage}/xslfo"/>
        </jar>

    </target>

    <!--=============================-->
    <!--        JAR-STATCVS          -->
    <!--=============================-->
    <target name        = "jar-statcvs" 
            depends     = "init" 
            description = "Creates toolbox-statcvs.jar which contains all the necessary jars to load the StatCVS plugin.">

        <delete verbose="true">
            <fileset dir="${dist}" includes="toolbox-statcvs.jar"/>
        </delete>

        <mkdir dir="${build.stage}/statcvs"/>
        
        <!-- Unjar all jars to staging area -->
        <unjar dest="${build.stage}/statcvs" overwrite="true">
            <fileset dir="${lib}">
                <include name="cvslib.jar"/>
                <include name="statcvs.jar"/>
            </fileset>
        </unjar>    

        <!-- Jar up staging area to produce toolbox-statcvs.jar -->
        <jar jarfile ="${dist}/toolbox-statcvs.jar" compress="yes">
            <fileset dir="${build.stage}/statcvs"/>
        </jar>

    </target>


    <!--=============================-->
    <!--           JAR-ANT           -->
    <!--=============================-->
    <target name        = "jar-ant" 
            depends     = "init"
            description = "Creates toolbox-ant.jar.">

        <delete verbose="true">
            <fileset dir="${dist}" includes="toolbox-ant.jar"/>
        </delete>

        <classfileset id="anttasks" dir="${classes}">
            <rootfileset dir="${classes}" includes="toolbox/ant/*.class"/>
        </classfileset>
        
        <jar jarfile = "${dist}/toolbox-ant.jar" compress = "yes">
            <fileset refid="anttasks"/> 
        </jar>
    </target>

    
    <!--=============================-->
    <!--           JAR-SRC           -->
    <!--=============================-->
    <target name        = "jar-src" 
            depends     = "init" 
            description = "Creates toolbox-src.jar which contains only the source code">
        
        <zip zipfile="${dist}/toolbox-src.jar">
            <fileset dir="${top}" includes="src/**/*.java"/>
            <fileset dir="${top}" includes="src/**/*.MF"/>
            <fileset dir="${top}" includes="build.xml"/>
            <fileset dir="${top}" includes="resources/**/*"/>
        </zip>
        
    </target>


    <!--=============================-->
    <!--             DIST            -->
    <!--=============================-->
    <target name        = "dist" 
            depends     = "jar"
            description = "Distributes the jar locally">
    
        <copy todir="c:\bin\" overwrite="yes" verbose="true">
            <fileset dir="${dist}" includes="**/*.jar"/>
        </copy>
        
    </target>


    <!--=============================-->
    <!--          MAKE-EXE           -->
    <!--=============================-->
    <target name="make-exe"
            description="Creates a native executable"
            depends="init">
    
        <jstub archive="${dist}/toolbox.jar"
               mode="win32-console"
               execute="java -jar toolbox.exe workspace"
               output="${dist}/toolbox.exe"/>
    </target>


    <!--=============================-->
    <!--          JAVADOC            -->
    <!--=============================-->
    <target name        = "javadoc" 
            depends     = "init"
            description = "Generates javadocs from the source code">
    
        <mkdir dir="${doc}"/>
        <mkdir dir="${javadoc}"/>
        
        <delete>
            <fileset dir="${javadoc}" includes="**/**"/>
        </delete>
                
        <javadoc 
            access           = "private" 
            author           = "true"
            classpath        = "${project.classpath}"
            destdir          = "${javadoc}"
            doctitle         = "Toolbox" 
            nodeprecated     = "false"
            nodeprecatedlist = "false" 
            noindex          = "false" 
            nonavbar         = "false"
            notree           = "false"
            packagenames     = "toolbox.*"
            sourcepath       = "${src}"
            splitindex       = "false" 
            use              = "true" 
            version          = "true"
            stylesheetfile   = "${build.conf}/javadoc-stylesheet.css">
            
            <link href="http://www.junit.org/junit/javadoc/3.8.1/index.htm"/>
            <link href="http://jakarta.apache.org/log4j/docs/api"/>
            <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
            <link href="http://jakarta.apache.org/commons/beanutils/api"/>
            <link href="http://jakarta.apache.org/commons/logging/api"/>
            <link href="http://jakarta.apache.org/commons/collections/api"/>
            <link href="http://jakarta.apache.org/commons/lang/api"/>
            <link href="http://jakarta.apache.org/commons/net/apidocs"/>
            <link href="http://jakarta.apache.org/regexp/apidocs/"/>
            
        </javadoc>            
            
    </target>


    <!--=============================-->
    <!--            JUNIT            -->
    <!--=============================-->
    <target name        = "junit" 
            depends     = "init"
            description = "Executes JUnit tests and generates report. Use -Djunit.class to single out test class.">

        <echo message="Testing..."/>

        <mkdir dir="${junit}"/>
        <mkdir dir="${junit.xml}"/>
        <mkdir dir="${junit.html}"/>
        
        <delete failonerror="false">
            <fileset dir="${junit.xml}" includes="**/TEST*.xml"></fileset>
        </delete>
        
        <!-- <junit printSummary="yes" haltonfailure="no"> "withOutAndErr" -->

        <junit printSummary="withOutAndErr" haltonfailure="no" fork="no" maxmemory="1024">

            <classpath>
                <pathelement path="${classes}" />
                <pathelement path="${resources}" />
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                    <include name="**/*.zip"/>
                    <exclude name="xercesImpl.jar"/>
                    <exclude name="xml-apis.jar"/>
                </fileset>
                <pathelement path="${build.lib}/clover.jar"/>
            </classpath>
            
            <formatter type="xml"/>

            <!-- have to fork because JDBCUtilTest gets out of mem error -->
            <!-- but it is not really out of mem ##!@!@                  -->
            
            <batchtest fork="no" todir="${junit.xml}">
                <fileset dir="${src}">
                
                    <!-- if junit.class is defined, run only tests that match the class name -->
                    <include name="**/*Test.java" unless="junit.class"/>                
                    <include name="**/test/*${junit.class}*.java"/> 
                    
                    <!-- exclude the GUI tests -->
                    <exclude name="**/ui/**/*Test.java" />
                    <exclude name="**/SwingUtilTest.java"/>
                    <exclude name="**/jedit/**"/>
                    <exclude name="**/log4j/im/**/*Test.java"/>
                    <exclude name="**/BannerTaskTest.java"/>
                    <exclude name="**/PropertyPromptTaskTest.java"/>   
                </fileset>
            </batchtest>
          
        </junit>

    </target>


    <!--=============================-->
    <!--        JUNIT.REPORT         -->
    <!--=============================-->
    <target name        = "junit.report" 
            depends     = "init"
            description = "Launches report containing results of the JUnit test cases">

        <junitreport todir="${junit.xml}">
            <fileset dir="${junit.xml}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.html}"/>
        </junitreport>        
        
        <echo message="OS=${os.name}"/>
        
        <exec executable="cmd.exe">
            <!-- os="Windows NT" -->
            <arg line="/c start ${junit.html}/index.html"/>
        </exec>            
            
    </target>


    <!--=============================-->
    <!--        WITH.CLOVER          -->
    <!--=============================-->
    <target name        = "with.clover" 
            depends     = "init"
            description = "Turns on usage of clover">
            
        <mkdir dir="${clover}"/>
        
        <clover-setup initString="${clover}/coverage.db">
            <files>
                <exclude name="**/test/*.java"/>
                <exclude name="**/ui/**/*.java"/>
                <exclude name="**/SwingUtil.java"/>
                <exclude name="**/jedit/**/*.java"/>
                <exclude name="**/jtail/**/*.java"/>
                
                <!-- plugins can't be tested -->
                <exclude name="**/*Plugin*.java"/>
                <exclude name="**/JSourceView*.*"/>
                <exclude name="**/JFindClass*.*"/>
                <exclude name="**/JTcpTunnel*.*"/>
                <exclude name="**/JText*.*"/>
                <exclude name="toolbox/jdbc/**"/>
                <exclude name="toolbox/rtelnet/**"/>
                <exclude name="toolbox/util/reflect/**"/>
                <exclude name="toolbox/util/xml/**"/>
                
                <!-- leave out debug branch classes -->
                <exclude name="org/**/*"/>
                <exclude name="com/**/*"/>
                
            </files>             
        </clover-setup>
    </target>


    <!--=============================-->
    <!--        CLOVER.SWING         -->
    <!--=============================-->
    <target name        = "clover.swing" 
            depends     = "with.clover" 
            description = "Launches Swing based GUI to view Clover coverage reports">
       <clover-view/>
    </target>


    <!--=============================-->
    <!--        CLOVER.HTML          -->
    <!--=============================-->
    <target name        = "clover.html" 
            depends     = "with.clover"
            description = "Generates Clover coverage report in HTML format">
            
       <clover-report>
          <current outfile="${clover}">
             <format type="html"/>
          </current>
       </clover-report>
       
        <exec executable="cmd.exe">
            <arg line="/c start ${clover}/index.html"/>
        </exec>            
       
    </target>
    
    
    <!--=============================-->
    <!--        CLOVER.XML           -->
    <!--=============================-->
    <target name        = "clover.xml" 
            depends     = "with.clover"
            description = "Generates Clover coverage data in XML">
            
       <clover-report>
          <current outfile="${clover}/coverage.xml">
             <format type="xml"/>
          </current>
       </clover-report>
    </target>
    
    
    <!--=============================-->
    <!--        CLOVER.PDF           -->
    <!--=============================-->
    <target name        = "clover.pdf" 
            depends     = "with.clover"
            description = "Generates Clover summary report to a PDF file">
            
       <clover-report>
          <current summary="yes" outfile="${clover}/coverage.pdf">
             <format type="pdf"/>
          </current>
       </clover-report>
    </target>


    <!--=============================-->
    <!--        CLOVER.CLEAN         -->
    <!--=============================-->
    <target name        = "clover.clean"
            depends     = "with.clover"
            description = "Removes clover generated files">
                    
        <delete verbose="true" quiet="off">
            <fileset dir="${clover}" includes="*.*"/>    
        </delete>
        
    </target>

    
    <!--=============================--> 
    <!--    BACKUP SRC               -->
    <!--=============================-->
    <target name        = "backup-src" 
            depends     = "init" 
            description = "Backs up source code to tmp dir">    

        <property name="backup.dir" value="${java.io.tmpdir}/toolbox-backup"/>
        <mkdir dir="${backup.dir}"/>        
        <copy todir="${backup.dir}" >
            <fileset dir="${src}"/>
        </copy>
        
     </target>

    
    <!--=============================--> 
    <!--        CHECKSTYLE           -->
    <!--=============================-->
    <target name        = "checkstyle" 
            depends     = "init" 
            description = "Generates a report of code convention violations.">    

        <delete failonerror="false" dir="${checkstyle}/*.*"/> 
        <mkdir dir="${checkstyle}"/>
    
        <checkstyle config="${build.conf}/checkstyle_checks.xml"
                    failOnViolation="false">
                    
            <fileset dir="${src}" includes="**/*.java"/>    
            
            <formatter type   = "xml" 
                       toFile = "${checkstyle}/checkstyle_report.xml"/>       
        </checkstyle>
                     
        <!-- transform the xml report to html -->
        <style basedir  = "${checkstyle}" 
               destdir  = "${checkstyle}"                           
               includes = "checkstyle_report.xml"                                    
               style    = "${build.conf}/checkstyle-noframes-sorted.xsl"/>
                
        <exec executable="cmd.exe">
            <arg line="/c start ${checkstyle}/checkstyle_report.html"/>
        </exec>            
                
    </target>


    <!--=============================--> 
    <!--          CVSLOG             -->
    <!--=============================-->
    <target name="cvslog" depends="init">

        <mkdir dir="${statcvs}"/>        
        
        <delete file="${top}/.cvspass" verbose="true"/>
            
        <input message="Enter CVS password:" addproperty="cvs.password"/>    
        
        <property 
            name="cvsroot" 
            value=":pserver:analogue@12.239.81.65:4802/c//cvs/cvsrep"/>
        
        <cvspass password = "${cvs.password}"
                 cvsroot  = "${cvsroot}"
                 passfile = "${top}/.cvspass"/>
                 
         <loadfile property="cvspass" srcFile="${top}/.cvspass"/>                 
         <echo message="${cvspass}"/>
                 
         <cvs cvsroot  = "${cvsroot}"
              output   = "${statcvs}/cvs.log"
              command  = "log"
              passfile = "${top}/.cvspass"/>

        <delete file="${top}/.cvspass"/>
    
    </target>


    <!--=============================--> 
    <!--          STATCVS            -->
    <!--=============================-->
    <target name        = "statcvs" 
            depends     = "init, cvslog"
            description = "Generates a report with CVS statistics">
            
        <statcvs 
            projectName      = "Toolbox"
            projectDirectory = "${top}"
            cvsLogFile       = "${statcvs}/cvs.log"
            outputDirectory  = "${statcvs}"
            cssFile          = "http://statcvs.sf.net/stats/statcvs.css"
            showCredits      = "no"/>
            
    </target>


    <!--=============================--> 
    <!--       JAVA2HTML             -->
    <!--=============================-->
    <target name        = "java2html"
            depends     = "init"
            description = "Generates colorized HTML version of the source code useful for browsing">
    
        <mkdir dir="${doc}/java2html"/>
        
        <java2html 
            title       = "Toolbox"
            simple      = "no"
            tabsize     = "4"
            marginsize  = "2"
            header      = "true"
            footer      = "false"
            destination = "${doc}/java2html">
                   
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
            
        </java2html>
        
        <copy overwrite = "true" 
              verbose   = "true"
              file      = "${build.conf}/java2html-stylesheet.css" 
              tofile    = "${doc}/java2html/stylesheet.css"/>
        
    </target>    
    
    <!--=============================-->
    <!--         TASKDEFS            -->
    <!--=============================-->
    <taskdef name      = "banner" 
             classname = "toolbox.ant.BannerTask"
             classpath = "build/lib/toolbox-ant.jar;build/lib/commons-cli.jar;build/lib/log4j.jar"/>
                          
    <taskdef resource  = "clovertasks" classpath = "build/lib/clover.jar"/>
    <typedef resource  = "clovertypes" classpath = "build/lib/clover.jar"/>

    <taskdef name      = "java2html" 
             classname = "com.java2html.Java2HTMLTask"
             classpath = "build/lib/j2h.jar"/>

    <taskdef name      = "statcvs" 
             classname = "net.sf.statcvs.ant.StatCvsTask"
             classpath = "build/lib/statcvs.jar"/>
    
    <taskdef resource  = "checkstyletask.properties"
             classpath = "build/lib/checkstyle.jar"/>

    <taskdef resource  = "com/roxes/tools/ant/taskdefs.properties"
             classpath = "build/lib/roxes.jar"/>
    
</project>