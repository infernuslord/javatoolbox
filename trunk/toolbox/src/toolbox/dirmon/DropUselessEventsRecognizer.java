package toolbox.dirmon;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.io.FilenameUtils;

import toolbox.util.dirmon.DirSnapshot;
import toolbox.util.dirmon.FileSnapshot;
import toolbox.util.dirmon.IFileActivityRecognizer;
import toolbox.util.dirmon.event.FileEvent;

/**
 * Drops events generated by the default 
 * {@link toolbox.util.dirmon.DirectoryMonitor} file activity recognizers 
 * that this DirMon app is not interested in such as tmp files and timestamp
 * changes to a directory.
 */
public class DropUselessEventsRecognizer 
    implements IFileActivityRecognizer {

    // -------------------------------------------------------------------------
    // Fields
    // -------------------------------------------------------------------------
    
    /**
     * Recognizer being decorated by this recognizer.
     */
    private IFileActivityRecognizer delegate;
    
    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------
    
    public DropUselessEventsRecognizer(IFileActivityRecognizer delegate) {
        this.delegate = delegate;
    }

    // -------------------------------------------------------------------------
    // IFileActivityRecognizer Interface
    // -------------------------------------------------------------------------
    
    public List getRecognizedEvents(DirSnapshot before, DirSnapshot after) {
        
        // List of events to filter
        List events = delegate.getRecognizedEvents(before, after);
        
        // Bucket for events to drop
        List dropped = new ArrayList();
        
        for (Iterator i = events.iterator(); i.hasNext(); ) {
            Object event = i.next();
            
            if (event instanceof FileEvent) {
                
                FileEvent fileEvent = (FileEvent) event;
                FileSnapshot afterSnapshot = fileEvent.getAfterSnapshot();
                FileSnapshot beforeSnapshot = fileEvent.getBeforeSnapshot();
                
                switch (fileEvent.getEventType()) {
                    
                    case FileEvent.TYPE_FILE_CHANGED:
                        
                        // Drop changes in directories (only thing that changes
                        // the directory's timestamp
                        
                        if (afterSnapshot.isDirectory())
                            dropped.add(event);
                
                        // Drop all files and directories that begin with the
                        // ~ (tilde) character. Microsoft apps create alot of
                        // temporary files that begin with these
                
                        else if (isTempFileOrDir(afterSnapshot))
                            dropped.add(event);
                            
                        break;
                
                        
                    case FileEvent.TYPE_FILE_CREATED:
                        
                        if (isTempFileOrDir(afterSnapshot))
                            dropped.add(event);
                        
                        break;
                
                    case FileEvent.TYPE_FILE_DELETED:
                        if (isTempFileOrDir(beforeSnapshot))
                            dropped.add(event);
                        break;
                
                    case FileEvent.TYPE_FILE_CREATION_FINISHED:
                        // no-op
                        break;
                
                    default:
                        throw new IllegalArgumentException(
                            "File event type: " + fileEvent.getEventType() + " not handled.");
                }
            }
        }

        // Drop the events
        if (!dropped.isEmpty()) {
            for (Iterator i = dropped.iterator(); i.hasNext(); )
                events.remove(i.next());
        }
        
        return events;
    }
    
    // -------------------------------------------------------------------------
    // Private 
    // -------------------------------------------------------------------------
    
    private boolean isTempFileOrDir(FileSnapshot snapshot) {
        return FilenameUtils.getName(snapshot.getAbsolutePath()).startsWith("~");
    }
}