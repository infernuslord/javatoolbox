package toolbox.util.io;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.log4j.Logger;

/**
 * An InputStream which limits (or "throttles") the bandwidth of bytes written
 * to it. Original version from http://freenet.sf.net
 * 
 * @see toolbox.util.io.ThrottledOutputStream
 */
public class ThrottledInputStream extends FilterInputStream
{
    // TODO: Write unit test
    
    private static final Logger logger_ = 
        Logger.getLogger(ThrottledInputStream.class);

    //--------------------------------------------------------------------------
    // Fields
    //--------------------------------------------------------------------------
    
    /**
     * Controller for the bandwidth generated by the stream.
     */
    private Bandwidth bandwidth_;
    
    /**
     * Reserved bandwidth.
     */
    private int reservedBandwidth_;
    
    /**
     * Disabled flag.
     */
    private boolean disabled_;

    //--------------------------------------------------------------------------
    // Constructors
    //--------------------------------------------------------------------------
    
    /**
     * Creates a ThrottledInputStream.
     * 
     * @param in Inputstream to throttle.
     * @param disabled True to enable throttling, false otherwise.
     */
    public ThrottledInputStream(InputStream in, boolean disabled)
    {
        super(in);
        setDisabled(disabled);
        
        // slow down the creation of new streams if bandwidth is low.
        if (bandwidth_ != null && bandwidth_.getBandwidthPerTick() > 0)
            reservedBandwidth_ = bandwidth_.getBandwidth(10000);
        else
            reservedBandwidth_ = 0;
    }

    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------
    
    /**
     * Sets the bandwidth limits of this stream.
     * 
     * @param bandwidth Available bandwidth for this stream.
     */
    public void setThrottle(Bandwidth bandwidth)
    {
        bandwidth_ = bandwidth;
    }

    
    /**
     * Toggles throttling of this stream.
     * 
     * @param disabled False to enable throttling, true otherwise.
     */
    public void setDisabled(boolean disabled)
    {
        disabled_ = disabled;
    }

    //--------------------------------------------------------------------------
    // Overrides FilterInputStream
    //--------------------------------------------------------------------------
    
    /**
     * @see java.io.InputStream#read()
     */
    public int read() throws IOException
    {
        boolean trace = false;
        
        if (trace)
            logger_.debug("read()");
        
        int rv = super.read();
        
        if (trace)
            logger_.debug("done super.read()");
        
        if (disabled_)
            return rv;
        
        if (rv != -1)
            bandwidth_.chargeBandwidth(1);
        
        if (trace)
            logger_.debug("Charged");
        
        if (reservedBandwidth_ > 0)
        {
            bandwidth_.putBandwidth(reservedBandwidth_);
            reservedBandwidth_ = 0;
        }
        
        if (trace)
            logger_.debug("Put");
        
        return rv;
    }


    /**
     * @see java.io.InputStream#read(byte[], int, int)
     */
    public int read(byte[] data, int offset, int length) throws IOException
    {
        boolean trace = false;
        
        if (trace)
            logger_.debug("read(,,)");
        
        int rv = in.read(data, offset, length);
        
        if (trace)
            logger_.debug("super.read(,,) done");
        
        if (disabled_)
            return rv;
        
        if (rv > 0)
        {
            bandwidth_.chargeBandwidth(rv);
        }
        
        if (reservedBandwidth_ > 0)
        {
            bandwidth_.putBandwidth(reservedBandwidth_);
            reservedBandwidth_ = 0;
        }
        
        return rv;
    }
}