<!-- ===========================================================================

  Maven Custom Goals for the Java Toolbox    

============================================================================ -->

<project
  default="help"
  xmlns:maven="jelly:maven"
  xmlns:j="jelly:core"
  xmlns:u="jelly:util"
  xmlns:ant="jelly:ant"
  xmlns:bsh="jelly:beanshell">

    <!-- =================================================================== -->
    <!-- [PRE] JAVA:COMPILE                                                  -->
    <!-- =================================================================== -->
    <preGoal name="java:compile"> 
        
       <!-- Piggybacks the debug source tree onto the compile goal -->
       <path id="debug.src" location="${basedir}/debug"/> 
       <maven:addPath id="maven.compile.src.set" refid="debug.src"/> 
        
    </preGoal> 

    
    <!-- =================================================================== -->
    <!-- CVS-UPDATE                                                          -->
    <!-- =================================================================== -->
    <goal name="cvs-update" description="Updates the project from CVS">

      <mkdir dir="${basedir}/src"/>
      <j:set var="dest" value="${basedir}/src"/>
    
      <!-- Update from CVS -->
      <cvs command     = "update -d"
           dest        = "${dest}"
           failonerror = "false"/>
           <!-- noexec  = "true" -->         
    </goal>


    <!-- =================================================================== -->
    <!-- JNLP-DEPLOY                                                         -->
    <!-- =================================================================== -->
    <goal name="jnlp-deploy" description="Deploys the JNLP distribution to Tomcat">
      
      <!-- Fix the main jar in the jnlp file to occur before all the 3rd  -->
      <!-- party jars so that the debug classes will be loaded from the   -->
      <!-- main jar first.                                                -->
      
      <!--echoproperties/-->
     
      <bsh:script><![CDATA[
        import java.util.*;
        import java.io.*;
        import nu.xom.*;
         
        //print("===== fixjnlp.bsh begin ========");
        
        String fs = File.separator+"";
        
        String inputFile = "target" + fs + "jnlp" + fs + "toolbox.jnlp";
        
        System.out.println("JNLP file = " + inputFile);
        	
        String outputFile = inputFile;
        
        //which(java.lang.Object.class);
        //which(System.class);
        //which("nu.xom.Builder");
        //print(getClassPath());
        
        InputStream is = new FileInputStream(new File(inputFile));
        
        //print(is);
        
        Builder parser = new Builder();
        Document doc = parser.build(is);
        Element root = doc.getRootElement();
        
        //print(root.toXML());
        
        Element resources = root.getFirstChildElement("resources");
        Element firstJar = resources.getFirstChildElement("jar");
        Elements jars = resources.getChildElements("jar");
        
        for (int i = 0; i<jars.size(); i++)
        { 
          Element jar = jars.get(i);
            
          //print("Iterating..." + jar.toXML());
          
          Attribute main = jar.getAttribute("main");
            
          if (main != null)
          {
              System.out.println("Fixing jnlp file...");
              jar.detach();
              int idx = resources.indexOf(firstJar);
              //print("index=" + idx);
              resources.insertChild(jar, idx);
              break;
          }
        }
        
        //print(resources.toXML()); 
        
        is.close();
        
        Writer w = new FileWriter(outputFile);
        w.write(root.toXML());
        w.close();
        
        //print("===== fixjnlp.bsh end ========");        
        
        ]]>
      </bsh:script>

      <!-- Copy everything over to the tomcat directory -->
      <copy todir="${toolbox.jnlp.deploy}" 
            verbose="true"
            quiet="false" 
            overwrite="false">
          
        <fileset dir="${basedir}/target/jnlp" includes="*.*"/>
        <fileset dir="${basedir}/resources/toolbox/util/ui/images" 
                 includes="Toolbox.gif"/>
      </copy>
    </goal>


    <!-- =================================================================== -->
    <!-- UPDATE-PROPS                                                        -->
    <!-- =================================================================== -->
    <goal name="update-props" description="Copy build.properties to $HOME">
        <property environment="sysenv"/>
        <copy todir="${sysenv.USERPROFILE}" verbose="true" overwrite="true">
            <fileset dir="${basedir}" includes="build.properties"/>
        </copy>
    </goal> 


    <!-- =================================================================== -->
    <!-- HELP                                                                -->
    <!-- =================================================================== -->
    <goal name="help" description="Help for build targets">
        <echo>
================================================================================
                             Project Build Help
================================================================================

Scope: 

  Maven goals for the Java Toolbox

Commands:

  clean         Deletes residual class files, jars, directories generated by 
                the build process.
  compile       Compiles the project only.
  cvs-update    Does a cvs update of the project.
  jar           Compiles, unit tests, and jars the project.
  jnlp          Creates jnlp distribution in target/jnlp
  jnlp-deploy   Copies the jnlp distribution to the http server
  test          Runs unit tests
  site          Generates project website with reports and all.
  umlgraph      Generate UML graph
  update-props  Copies build.properties to $HOME

================================================================================
        </echo>
    </goal>
    
    <!-- =================================================================== -->
    <!-- UMLGRAPH                                                            -->
    <!-- =================================================================== -->
    <goal name="umlgraph" description="Generates UML class diagrams">
        
        <!-- TODO: This task is unfinished because dot is not implemented    --> 
        <!--       in java. Maybe finish if dot ever gets ported.            -->
        
        <path id="umlgraph.classpath">
            <fileset dir="${basedir}/lib">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </path>
        
        <!--
		<pathconvert 
		    targetos="windows" 
		    property="umlgraph.classpath" 
		    refid="umlgraph.classpath"/>
		    
		    
            doclet           = "UmlGraph"
            docletpath       = "${basedir}/build/lib/umlgraph.jar"
		    
                <param name="-operations" value=""/>
                <param name="-visibility" value=""/>
                <param name="-types" value=""/>
                <param name="-qualify"/>
		    
        <echo>classpath=${umlgraph.classpathy}</echo>
        -->
        
        <javadoc 
            sourcepath       = "${basedir}/src"
            packagenames     = "toolbox.findclass.*"
            classpathref     = "umlgraph.classpath"
            verbose          = "false">
            
            <doclet name="UmlGraph" path="${basedir}/build/lib/umlgraph.jar">
                <param name="-all"/>
                <param name="-bgcolor" value="lightgray"/>
                <param name="-nodefontname" value="lucon"/>
                <param name="-nodefontabstractname" value="lucon"/>
                <param name="-edgefontname" value="lucon"/>
                <param name="-nodefillcolor" value="lightblue"/>
                <param name="-nodefontcolor" value="blue"/>
                <param name="-edgecolor" value="white"/>
                
            </doclet>    
        </javadoc>
            
		<exec executable="dot">
		    <arg value="-Tgif"/>
		    <arg value="graph.dot"/>
		    <arg value="-ograph.gif"/>
		</exec>            
    </goal>
</project>