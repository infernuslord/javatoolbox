package toolbox.dbconsole.command;

import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Iterator;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;
import org.apache.commons.lang.time.StopWatch;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.xml.sax.InputSource;

import org.dbunit.DatabaseUnitException;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.ForwardOnlyResultSetTableFactory;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.stream.IDataSetProducer;
import org.dbunit.dataset.stream.StreamingDataSet;
import org.dbunit.dataset.xml.FlatXmlProducer;
import org.dbunit.ext.oracle.OracleConnection;
import org.dbunit.operation.DatabaseOperation;

import toolbox.dbconsole.Command;
import toolbox.dbconsole.TestConsole;
import toolbox.dbconsole.TestDatabase;
import toolbox.dbconsole.TestEnvironment;
import toolbox.dbconsole.util.TimedOperation;
import toolbox.util.JDBCSession;
import toolbox.util.StringUtil;
import toolbox.util.db.oracle.OracleUtil;

/**
 * Imports to a database from a flatfile generated by the 
 * {@link toolbox.dbconsole.command.ExportDatabaseCommand}.
 */
public class ImportDatabaseCommand implements Command {

    private static final Log logger =
        LogFactory.getLog(ImportDatabaseCommand.class);

    //--------------------------------------------------------------------------
    // Fields
    //--------------------------------------------------------------------------

    /**
     * Test environment to copy to.
     */
    private TestEnvironment destEnv;

    /**
     * Reference to the console which invoked this command.
     */
    private TestConsole console;

    /**
     * Disable constraints before deleting or truncing tables and restore after.
     */
    private boolean disableConstraints;

    /**
     * Use truncate instead of delete for clearing out data (truncate is faster)
     * and also implies that the constraints will be disabled.
     */
    private boolean useTruncate;

    /**
     * The file to import from.
     */
    private String importFilename;
    
    //--------------------------------------------------------------------------
    // Constructors
    //--------------------------------------------------------------------------

    /**
     * Creates a ImportDatabaseCommand.
     * <p>
     * Defaults are:
     * <ul>
     *   <li>constraints are disabled
     *   <li>truncate is used instead of delete
     * </ul>
     */
    public ImportDatabaseCommand() {
        setDisableConstraints(true);
        setUseTruncate(true);
    }

    //--------------------------------------------------------------------------
    // Command Interface
    //--------------------------------------------------------------------------

    /*
     * @see toolbox.dbconsole.Command#getName()
     */
    public String getName() {
        return "importdb";
    }


    /*
     * @see toolbox.dbconsole.Command#getDescription()
     */
    public String getDescription() {
        return "Imports a flatfile generated by exportdb into a database.";
    }


    /*
     * @see toolbox.dbconsole.Command#execute(toolbox.dbconsole.TestConsole, java.lang.Object[])
     */
    public void execute(TestConsole console, Object[] args) throws Exception {

        setConsole(console);

        if (!parseArgs((String[]) args))
            return;

        logger.debug(StringUtil.banner(
            "Options:\n"
            + "  disableConstraints = " + isDisableConstraints() + "\n"
            + "  useTruncate        = " + isUseTruncate()));


        // Time the whole thing...
        StopWatch watch = new StopWatch();
        watch.start();

        logger.debug(StringUtil.banner(
            "Importing from "
            + getImportFilename()
            + " into "
            + getDestEnv().getName()));

        importDatabase(
            getDestEnv().getDatabases()[0], 
            new File(getImportFilename()));

        watch.stop();
        logger.debug("Import db completed in " + watch.toString());
    }

    //--------------------------------------------------------------------------
    // Protected
    //--------------------------------------------------------------------------

    /**
     * Prints out help for this command to the console.
     *
     * @param options Command line options.
     */
    protected void printHelp(Options options) {

        String header =
            ".\n"
          + "Copies the databases from one test environment                \n"
          + "to another. This operation can be quite lengthy and requires  \n"
          + "that the temp directory on the local machine has plenty of    \n"
          + "space for temporary storage. Database sequences are           \n"
          + "also synchronized as part of this operation.                  \n"
          + ".                                                             \n";

        HelpFormatter hf = new HelpFormatter();
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        hf.printHelp(
            pw,
            80,
            "importdb <importfile> <dest env>",
            header,
            options,
            2,
            1,
            "",
            true);

        getConsole().getPrintStream().println(sw.toString());
    }


    /**
     * Import a database from an XML file that was generated via
     * exportDatabase().
     *
     * @param dest Destination database.
     * @param exportFile XML file generated via exportDatabase().
     * @throws Exception on error.
     * @throws SQLException on sql error.
     * @throws DatabaseUnitException on dbunit error.
     */
    protected void importDatabase(
        TestDatabase dest,
        File exportFile)
        throws Exception, SQLException, DatabaseUnitException {

        // Set the active environment
        new SetEnvCommand().execute(
            getConsole(),
            new String[] { getDestEnv().getName() });

        Connection destJdbcConnection =
            JDBCSession.getConnection(dest.getName());

        // Notice admin user must be used...
        IDatabaseConnection destConnection =
            new OracleConnection(destJdbcConnection, dest.getAdminUser());

        // Enable batch statements to speedup inserts...
        destConnection.getConfig().setFeature(
            DatabaseConfig.FEATURE_BATCHED_STATEMENTS, true);

        // Use forward only result sets for speed...
        destConnection.getConfig().setProperty(
            DatabaseConfig.PROPERTY_RESULTSET_TABLE_FACTORY,
            new ForwardOnlyResultSetTableFactory());

        IDataSetProducer producer =
            new FlatXmlProducer(new InputSource(exportFile.getAbsolutePath()));

        // Use streaming so the entire dataset is not kept resident in memory...
        StreamingDataSet ds = new StreamingDataSet(producer);

        logger.debug(StringUtil.banner(
            "Importing "
            + exportFile
            + " to "
            + destEnv
            + ":"
            + dest.getName()
            + "..."));

        // Constraints must be disabled if using truncate!
        setDisableConstraints(isUseTruncate());

        if (isDisableConstraints())
            OracleUtil.setConstraintsEnabled(dest.getName(), false);

        if (isUseTruncate()) {
            // Truncate is faster than delete and no need to rollback but
            // requires a few more privileges if the database is locked down.
            new TimedOperation(
                "TRUNCATE",
                 DatabaseOperation.TRUNCATE_TABLE).execute(destConnection, ds);
        }
        else {
            // Delete takes too long even with the ref keys disabled but is
            // failsafe when permissions are a problem.
            new TimedOperation(
                "DELETE_ALL",
                DatabaseOperation.DELETE_ALL).execute(destConnection, ds);
        }

        if (isDisableConstraints())
            OracleUtil.setConstraintsEnabled(dest.getName(), true);

        // Create a new dataset cuz streaming ds can only create one iterator
        // ever

        ds = new StreamingDataSet(producer);

        new TimedOperation(
            "INSERT",
            DatabaseOperation.INSERT).execute(destConnection, ds);
    }

    /**
     * Parses the command line options and arguments to this command.
     *
     * @param args Array of options and arguments.
     * @throws ParseException on invalid command line arguments.
     */
    protected boolean parseArgs(String args[]) throws ParseException {

        PrintStream out = getConsole().getPrintStream();
        CommandLineParser parser = new PosixParser();
        Options options = new Options();

        Option noTruncate = new Option(
            "t",
            "noTruncate",
            false,
            "Use delete instead of truncate to clear data");

        Option dontDisableConstraints = new Option(
            "c",
            "dontDisableConstraints",
            false,
            "Don't disable foreign key constraints when 'delete' is used to "
            + "clear the tables. Disregarded if truncate is enabled.");

        Option helpOption = new Option(
            "h",
            "help",
            false,
            "Prints usage");

        Option helpOption2 = new Option(
            "?",
            "?",
            false,
            "Prints usage");

        options.addOption(helpOption2);
        options.addOption(helpOption);
        options.addOption(noTruncate);
        options.addOption(dontDisableConstraints);

        CommandLine cmdLine = parser.parse(options, args, true);

        for (Iterator i = cmdLine.iterator(); i.hasNext();) {
            
            Option option = (Option) i.next();
            String opt = option.getOpt();

            if (opt.equals(noTruncate.getOpt())) {
                setUseTruncate(false);
            }
            else if (opt.equals(dontDisableConstraints.getOpt())) {
                setDisableConstraints(false);
            }
            else if (opt.equals(helpOption.getOpt())
                || opt.equals(helpOption2.getOpt())) {
                // printHelp(out);
                printHelp(options);
                // throw new ParseException("help");
                return false;
            }
            else {
                throw new IllegalArgumentException("Option "
                    + opt
                    + " not understood.");
            }
        }

        // Parse test environment names after options...
        String[] envArgs = cmdLine.getArgs();

        //logger.debug("Leftover args = " + ArrayUtil.toString(envArgs));

        switch (envArgs.length) {
            
            case 2  :

                String filename = envArgs[0].toString();
                String destEnvName = envArgs[1].toString();

                // Validate source environment name
                File f = new File(filename);

                if (f == null       || 
                    !f.exists()     || 
                    !f.isFile()     || 
                    !f.canRead()    || 
                    f.length() == 0) {

                    out.println(
                        "Import file '"
                        + filename
                        + "' is having problems being read.");
                    
                    return false;
                }
                else {
                    setImportFilename(filename);
                }

                // Validate destination environment name
                TestEnvironment dest =
                    SetEnvCommand.getEnvironment(destEnvName);

                if (dest == null) {
                    out.println(
                        "Environment '"
                        + destEnvName
                        + "' does not exist.");
                    return false;
                }
                else {
                    setDestEnv(dest);
                }
                break;

            default :
                
                out.println("ERROR: Invalid arguments or options");
                printHelp(options);
                return false;
        }

        return true;
    }

    //--------------------------------------------------------------------------
    // Accessors/Mutators
    //--------------------------------------------------------------------------

    /**
     * Returns the console.
     *
     * @return TestConsole
     */
    public TestConsole getConsole() {
        return console;
    }


    /**
     * Sets the console.
     *
     * @param console Test console.
     */
    public void setConsole(TestConsole console) {
        this.console = console;
    }


    /**
     * Returns the destination test environment.
     *
     * @return TestEnvironment
     */
    public TestEnvironment getDestEnv() {
        return destEnv;
    }


    /**
     * Sets the destination test environment.
     *
     * @param environment Destination test environment.
     */
    public void setDestEnv(TestEnvironment environment) {
        destEnv = environment;
    }


    /**
     * Returns true if foreign key constraints are disabled in the destination
     * database before clearing all existing data via either a delete or
     * truncate sql operation, false otherwise.
     *
     * @return boolean
     */
    public boolean isDisableConstraints() {
        return disableConstraints;
    }


    /**
     * Returns true to use sql truncate instead of sql delete to clear data out
     * of the destination database. Delete requires less permissions than
     * truncate but truncate is faster.
     *
     * @return boolean
     */
    public boolean isUseTruncate() {
        return useTruncate;
    }


    /**
     * Sets the flag to disable forign key constraints during the delete or
     * truncate operation.
     *
     * @param b True to disable constraints, false otherwise.
     */
    public void setDisableConstraints(boolean b) {
        disableConstraints = b;
    }


    /**
     * Sets the flag to use truncate instead of delete to empty the destination
     * database.
     *
     * @param b True to use truncate, false othewise.
     */
    public void setUseTruncate(boolean b) {
        useTruncate = b;
    }

    
    public String getImportFilename() {
        return importFilename;
    }

    
    public void setImportFilename(String importFilename) {
        this.importFilename = importFilename;
    }
}