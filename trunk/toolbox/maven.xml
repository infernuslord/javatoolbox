<!-- ===========================================================================
    
  Maven Base Project Customizations
  
  USAGE:

    You do not invoke this file explicitly. It is picked up by Maven 
    automatically if 'maven.xml' exists in the same directory as the Maven
    project file that is being executed (usually project.xml, but in our case
    base-project.xml). Goals that are defined in this file can be passed to
    maven via the command line to be executed. Execute maven with no command
    line args to print out additional help information on each of the goals.

  PURPOSE:
  
    This file contains additional behavior that is applicable and common to the
    build process of each individual PWSW sub-project (framework, rules, etc).
    
  EXAMPLE:
  
    maven cvs-update    

============================================================================ -->

<project
  default="help"
  xmlns:maven="jelly:maven"
  xmlns:j="jelly:core"
  xmlns:u="jelly:util"
  xmlns:ant="jelly:ant">


    <!-- =================================================================== -->
    <!-- UPDATE PROPS                                                        -->
    <!-- =================================================================== -->
    <goal name="update-props" description="Copy build.properties to $HOME">
        <property environment="sysenv"/>
        <copy todir="${sysenv.USERPROFILE}" verbose="true" overwrite="true">
            <fileset dir="${basedir}" includes="build.properties"/>
        </copy>
    </goal> 
  
  
    <!-- =================================================================== -->
    <!-- PRE:COMPILE                                                         -->
    <!-- =================================================================== -->
    <preGoal name="java:compile"> 
       <path id="debug.src" location="${basedir}/debug"/> 
       <maven:addPath id="maven.compile.src.set" refid="debug.src"/> 
    </preGoal> 


    <!-- =================================================================== -->
    <!-- PRE:TEST                                                            -->
    <!-- =================================================================== -->
    <preGoal name="test:test">

        <!--
       <ant:pathconvert targetos="windows" property="crap" refid="${maven.dependency.classpath}"/>
       -->
       
       <property name="crap" refid="maven.dependency.classpath"/>
       <set var="crap" value="${basedir};${crap}"/>
       <set var="maven.dependency.classpath" value="${crap}"/>
       <!--path id="maven.dependency.classpath" location="${basedir}"/>
        -->
       
       <echo message="crap=${crap}"/>
       <echo message="Before Pregoal Test: ${maven.dependency.classpath}"/>
       <echo message=""/>
              
       <path id="hacked" location="${basedir}/classes"/>
       <maven:addPath id="hacked" refid="maven.dependency.classpath"/>
       <j:set var="maven.dependency.classpath" value="${hacked}"/>
       
       <echo message=""/>
       <echo message="After Pregoal Test: ${maven.dependency.classpath}"/>
       <echo message=""/>
       
    </preGoal> 


    <!-- =================================================================== -->
    <!-- D E R E G I S T E R   R E P O R T S                                 -->
    <!-- =================================================================== -->
    <postGoal name="xdoc:register-reports"> 
        <attainGoal name="maven-linkcheck-plugin:deregister"/> 
    </postGoal>
      
    <postGoal name="xdoc:register-reports"> 
        <attainGoal name="maven-checkstyle-plugin:deregister"/> 
    </postGoal>

    
    <!-- =================================================================== -->
    <!-- C V S - U P D A T E                                                 -->
    <!-- =================================================================== -->
    <goal name="cvs-update" description="Updates the project from CVS">

      <mkdir dir="${basedir}/src"/>
    
      <!-- Only the uiframework module has a 'src' dir built into the cvs structure -->
      <j:set var="dest" value="${basedir}/src"/>
      <j:if test="${pom.artifactId == 'uiframework'}">
        <j:set var="dest" value="${basedir}"/>
      </j:if>
    
      <!-- Update from CVS. TODO: Clean checkout -->
      <cvs command     = "update -d"
           dest        = "${dest}"
           failonerror = "false"/>
           <!-- noexec  = "true" -->         
    </goal>


    <!-- =================================================================== -->
    <!-- J N L P - D E P L O Y                                               -->
    <!-- =================================================================== -->
    <goal name="jnlp-deploy" description="Deploys the JNLP distribution to Tomcat">
      <copy todir="k:/winapps/win2k/Tomcat41/webapps/ROOT/" 
            verbose="true" 
            overwrite="true">
        <fileset dir="${basedir}/target/jnlp" includes="*.*"/>
      </copy>
    </goal> 


    <!-- =================================================================== -->
    <!-- A L I A S E S                                                       -->
    <!-- =================================================================== -->
    <goal name="compile" description="Alias for java:compile">
		<attainGoal name="java:compile"/>
    </goal>
      
    <goal name="jar" description="Alias for jar:install">
    	<attainGoal name="jar:install"/>
    </goal>


    <!-- =================================================================== -->
    <!-- H E L P                                                             -->
    <!-- =================================================================== -->
    <goal name="help" description="Help for build targets">
        <echo>
================================================================================
                             Project Build Help
================================================================================

Scope: 

  Maven goals for Toolbox

Commands:

  clean         Deletes residual class files, jars, directories generated by 
                the build process.
  compile       Compiles the project only.
  cvs-update    Does a cvs update of the project.
  jar           Compiles, unit tests, and jars the project. It them exports 
                the jar to the local maven repository.
  jnlp          Creates jnlp distribution in target/jnlp
  jnlp-deploy   Copies the jnlp distribution to the http server
  site          Generates project website with reports and all.
  update-props  Copies build.properties to $HOME

================================================================================
        </echo>
    </goal>
</project>