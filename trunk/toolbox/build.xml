<?xml version="1.0"?>

<!-- build.xml for toolbox -->

<project name="toolbox" default="all" basedir=".">

    <description>
        Java Toolbox
    </description>
    
    <!--=============================-->
    <!--            PREP             -->
    <!--=============================-->
    <target name="prep">

        <tstamp/>

        <!-- Directories hanging off of root -->
        <property name="top"        location="."/>
        <property name="src"        location="${top}/src"/>
        <property name="dist"       location="${top}/dist"/>
        <property name="classes"    location="${top}/classes"/>
        <property name="resources"  location="${top}/resources"/>
        <property name="targets"    location="${top}/targets"/>
        <property name="lib"        location="${top}/lib"/>
        <property name="test"       location="${top}/test"/>
        <property name="build"      location="${top}/build"/>
        <property name="doc"        location="${top}/doc"/>
        
        <!-- Directories in /build -->
        <property name="build.lib"  location="${build}/lib"/>
        <property name="build.conf" location="${build}/conf"/>
        
        <!-- Directories in /doc -->
        <property name="javadoc"    location="${doc}/javadoc"/>
        <property name="clover"     location="${doc}/clover"/>        
        <property name="junit"      location="${doc}/junit"/>
        
        <!-- Directories in /doc/junit -->
        <property name="junit.xml"  location="${junit}/xml"/>
        <property name="junit.html" location="${junit}/html"/>
        
        
        <property name="project.init.message" 
                  value="${ant.project.name} project initialized"/>

        <!-- make common directories -->
        <mkdir dir="${targets}"/>
        
        <!-- OS specific properties -->
        <property environment="env"/>
        <condition property="os.type" value="unix">
            <os family="unix"/>
        </condition>
        <property name="os.type" value="windows"/>

        <!-- set standard properties -->
        <property name="javavm" value="1.2"/>
        
        <!-- Compiler Settings -->
        <property name="build.compiler.fulldepend" value="true"/>
        <property name="project.failonerror" value="true"/>
        <property name="project.debug" value="on"/>
        <property name="optimize" value="on"/>
        <property name="toolbox.id" value=""/>
        <property name="toolbox.rundir" location="."/>
        <property name="toolbox.junit.log" value="test.log"/>
        <!-- property name="build.compiler" value="jikes"/ -->        
        
        <!-- define project tools classpath -->
        <path id="project.tools.path">
            <fileset dir="${top}/lib">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </path>

        <!-- define common build classpath -->
        <path id="common.class.path">
            <!-- TODO: get rid of this -->
            <path refid="project.tools.path"/>
        </path>

        <property name="common.classpath" refid="common.class.path"/>

        <echo message="${os.name} ${os.arch} ${os.version}"/>
        <echo message="environment prepared on ${os.type} "/>
    </target>


    <!--=============================-->
    <!--            POST             -->
    <!--=============================-->
    <target name="post">

        <!-- define common runtime classpath -->
        <path id="runtime.class.path">
            <path refid="common.class.path"/>
            <pathelement location="${top}/resources"/>
        </path>
        
        <property name="runtime.classpath" refid="runtime.class.path"/>

        <echo message="Environment complete on ${os.type}"/>
    </target>


    <!--=============================-->
    <!--            ENV              -->
    <!--=============================-->
    <target name="env" depends="prep,post">
        <echo message="${ant.project.name} environment configured"/>
    </target>


    <!--=============================-->
    <!--            SETUP            -->
    <!--=============================-->
    <target name="setup" depends="env">
        <mkdir dir="${dist}"/>
        <mkdir dir="${classes}"/>
        <echo message="${ant.project.name} setup complete"/>
    </target>


    <!--=============================-->
    <!--             INIT            -->
    <!--=============================-->
    <target name="init" depends="setup">
        <path id="project.class.path">
            <pathelement location="${src}"/>
            <pathelement location="${classes}"/>
            <fileset dir="${build.lib}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
            <path refid="common.class.path"/>
        </path>
        <echo message="${project.init.message}"/>
    </target>


    <!--=============================-->
    <!--             ALL             -->
    <!--=============================-->
    <target name="all" 
            depends="init,compile,jar,dist" 
            description="Builds everything! (init, compile, jar, dist)"/>


    <!--=============================-->
    <!--            CLEAN            -->
    <!--=============================-->
    <target name="clean" 
            depends="env" 
            description="Removes files generated by the build process">
            
        <delete dir="${dist}" verbose="false" quiet="off"/>
        <delete dir="${classes}" verbose="false" quiet="off"/>
        
        <!--antcall target="clover.clean"-->
        
    </target>


    <!--=============================-->
    <!--           COMPILE           -->
    <!--=============================-->
    <target name="compile" 
            depends="init" 
            description="Compiles the source code">
    
        <property name="cp" refid="project.class.path"/>

        <!-- Dump the classpath -->        
        <script language="beanshell"> <![CDATA[
            print("CLASSPATH:");
            sb = new StringBuffer();
            cp = toolbox.getProperty("cp");
            for (t = new StringTokenizer(cp, File.pathSeparator); t.hasMoreTokens(); )
                sb.append(t.nextToken() + System.getProperty("line.separator"));
            print(sb.toString());
        ]]></script>
        
        <javac 
            srcdir   = "${src}" 
            destdir  = "${classes}" 
            debug    = "${project.debug}" 
            optimize = "${optimize}" 
            target   = "${javavm}" 
            fork     = "no"
            failonerror = "${project.failonerror}">
            
            <classpath refid="project.class.path"/>
        </javac>
    </target>


    <!--=============================-->
    <!--             JAR             -->
    <!--=============================-->
    <target name="jar" 
            depends="compile" 
            description="Creates an executable jar">

        <delete verbose="true">
            <fileset dir="${dist}" includes="**/*.jar"/>
        </delete>

        <unjar     
            src       ="${lib}/log4j.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
        
        <unjar     
            src       ="${lib}/jakarta-regexp.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
        <unjar 
            src       ="${lib}/jode.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/metouia.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/commons-cli.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/commons-lang.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/commons-beanutils.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/commons-logging.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/commons-collections.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/commons-net.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/plastic.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
        <unjar 
            src       ="${lib}/junit.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/kunststoff.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/xplookandfeel.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/xml-apis.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar  
            src       ="${lib}/xercesImpl.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <!--=======================-->
        <!-- Supports XSLFO plugin -->
        <!--=======================-->
        
        <unjar 
            src       ="${lib}/acrobat.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/jedit-syntax.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/fop.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
        <unjar 
            src       ="${lib}/batik.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
        <unjar 
            src       ="${lib}/avalon-framework.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
        
           <unjar 
            src       ="${lib}/apple-mrj.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
           <unjar 
            src       ="${lib}/xep.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
           <unjar 
            src       ="${lib}/xt.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
           <unjar 
            src       ="${lib}/saxon.jar" 
            dest      ="${classes}" 
            overwrite ="false" />
            
        <unjar 
            src       ="${lib}/cryptix32.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <unjar 
            src       ="${lib}/cryptix32-pgp.jar" 
            dest      ="${classes}" 
            overwrite ="false" />

        <!-- ==================================== -->

        <copy todir="${classes}" overwrite="yes" verbose="true">
            <fileset dir="${top}/debug" includes="**/*.class"/>
        </copy>
                    
        <jar 
            jarfile ="${dist}/toolbox.jar" 
            manifest="${src}/META-INF/MANIFEST.MF"
            compress="yes">

            <fileset dir="${classes}"   excludes="**/MANIFEST.MF,**/test/**"/>
            <fileset dir="${resources}" excludes="**/test/**"/>
        </jar>

    </target>

    
    <!--=============================-->
    <!--           JAR-SRC           -->
    <!--=============================-->
    <target name="jar-src" 
            depends="init" 
            description="Creates a jar containing only the source code">
        
        <zip zipfile="${dist}/toolbox-src.jar">
            <fileset dir="${top}" includes="src/**/*.java"/>
            <fileset dir="${top}" includes="src/**/*.MF"/>
            <fileset dir="${top}" includes="build.xml"/>
            <fileset dir="${top}" includes="resources/**/*"/>
        </zip>
        
    </target>


    <!--=============================-->
    <!--             DIST            -->
    <!--=============================-->
    <target name="dist" 
            depends="jar"
            description="Distributes jar">
    
        <copy todir="${targets}" overwrite="yes">
            <fileset dir="${dist}" includes="**/*.jar"/>
        </copy>
        
        <copy todir="c:\bin\" overwrite="yes">
            <fileset dir="${dist}" includes="**/*.jar"/>
        </copy>
        
    </target>


    <!--=============================-->
    <!--          JAVADOC            -->
    <!--=============================-->
    <target name="javadoc" 
            depends="init"
            description="Generates javadocs">
    
        <mkdir dir="${doc}"/>
        <mkdir dir="${javadoc}"/>
        
        <delete>
            <fileset dir="${javadoc}" includes="**/**"/>
        </delete>
                
        <javadoc 
            access="private" 
            author="true"
            classpath="${common.classpath}"
            destdir="${javadoc}"
            doctitle="Toolbox" 
            nodeprecated="false"
            nodeprecatedlist="false" 
            noindex="false" 
            nonavbar="false"
            notree="false"
            packagenames="toolbox.*"
            sourcepath="${src}"
            splitindex="false" 
            use="true" 
            version="true"
            stylesheetfile="${build.conf}/javadoc-stylesheet.css">
            
            <link href="http://www.junit.org/junit/javadoc/3.8.1/index.htm"/>
            <link href="http://jakarta.apache.org/log4j/docs/api"/>
            <link href="http://java.sun.com/j2se/1.4.1/docs/api"/>
            <link href="http://jakarta.apache.org/commons/beanutils/api"/>
            <link href="http://jakarta.apache.org/commons/logging/api"/>
            <link href="http://jakarta.apache.org/commons/collections/api"/>
            <link href="http://jakarta.apache.org/commons/lang/api"/>
            <link href="http://jakarta.apache.org/commons/net/apidocs"/>
            <link href="http://jakarta.apache.org/regexp/apidocs/"/>
            
        </javadoc>            
            
    </target>


    <!--=============================-->
    <!--            JUNIT            -->
    <!--=============================-->
    
    <target name="junit" depends="init"
            description="Executes JUnit tests and generates report. Use -Djunit.class to single out test class.">

        <mkdir dir="${junit}"/>
        <mkdir dir="${junit.xml}"/>
        <mkdir dir="${junit.html}"/>
        
        <delete failonerror="false">
            <fileset dir="${junit.xml}" includes="**/TEST*.xml"></fileset>
        </delete>
        
        <!-- <junit printSummary="yes" haltonfailure="no"> "withOutAndErr" -->

        <junit printSummary="withOutAndErr" haltonfailure="no">

            <classpath>
                <pathelement path="${classes}" />
                <pathelement path="${resources}" />
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                    <include name="**/*.zip"/>
                </fileset>
            </classpath>
            
            <formatter type="xml"/>
            
            <batchtest fork="no" todir="${junit.xml}">
                <fileset dir="${src}">
                
                    <!-- if junit.class is defined, run only tests that match the class name -->
                    <include name="**/*Test.java" unless="junit.class"/>                
                    <include name="**/test/*${junit.class}*.java"/> 
                    
                    <!-- exclude the GUI tests -->
                    <exclude name="**/ui/**/*Test.java" />
                    <exclude name="**/SwingUtilTest.java"/>
                    <exclude name="**/jedit/**"/>
                    
                </fileset>
            </batchtest>
          
        </junit>

    </target>


    <!--=============================-->
    <!--        JUNIT.REPORT         -->
    <!--=============================-->
    <target name="junit.report" 
            depends="init"
            description=
                "Launches report containing results of the JUnit test cases">

        <junitreport todir="${junit.xml}">
            <fileset dir="${junit.xml}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.html}"/>
        </junitreport>        
        
        <echo message="OS=${os.name}"/>
        
        <exec executable="cmd.exe">
            <!-- os="Windows NT" -->
            <arg line="/c start ${junit.html}/index.html"/>
        </exec>            
            
    </target>


    <!--=============================-->
    <!--        WITH.CLOVER          -->
    <!--=============================-->
    <taskdef resource="clovertasks"/>
    <typedef resource="clovertypes"/>

    <target name="with.clover" 
            depends="init"
            description="Turns on usage of clover">
            
        <mkdir dir="${clover}"/>
        
        <clover-setup initString="${clover}/coverage.db">
            <files>
                <exclude name="**/test/*.java"/>
                <exclude name="**/ui/**/*.java"/>
                <exclude name="**/SwingUtil.java"/>
                <exclude name="**/jedit/**/*.java"/>
                <exclude name="**/jsourceview/*.java"/>
                <exclude name="**/jtail/**/*.java"/>
                <exclude name="**/tunnel/*.java"/>
            </files>             
        </clover-setup>
    </target>


    <!--=============================-->
    <!--        CLOVER.SWING         -->
    <!--=============================-->
    <target name="clover.swing" 
            depends="with.clover" 
            description="Launches Swing based GUI to view Clover coverage reports">
       <clover-view/>
    </target>


    <!--=============================-->
    <!--        CLOVER.HTML          -->
    <!--=============================-->
    <target name="clover.html" 
            depends="with.clover"
            description="Generates Clover coverage report in HTML format">
            
       <clover-report>
          <current outfile="${clover}">
             <format type="html"/>
          </current>
       </clover-report>
       
        <exec executable="cmd.exe">
            <arg line="/c start ${clover}/index.html"/>
        </exec>            
       
    </target>
    
    
    <!--=============================-->
    <!--        CLOVER.XML           -->
    <!--=============================-->
    <target name="clover.xml" 
            depends="with.clover"
            description="Generates Clover coverage data in XML">
            
       <clover-report>
          <current outfile="${clover}/coverage.xml">
             <format type="xml"/>
          </current>
       </clover-report>
    </target>
    
    
    <!--=============================-->
    <!--        CLOVER.PDF           -->
    <!--=============================-->
    <target name="clover.pdf" 
            depends="with.clover"
            description="Generates Clover summary report to a PDF file">
            
       <clover-report>
          <current summary="yes" outfile="${clover}/coverage.pdf">
             <format type="pdf"/>
          </current>
       </clover-report>
    </target>


    <!--=============================-->
    <!--        CLOVER.CLEAN         -->
    <!--=============================-->
    <target name="clover.clean"
            depends="with.clover"
            description="Removes clover generated files">
                    
        <delete verbose="true" quiet="off">
            <fileset dir="${clover}" includes="*.*"/>    
        </delete>
        
    </target>

    
    <!--=============================--> 
    <!--    BACKUP SRC               -->
    <!--=============================-->
    <target name="backup-src" 
            depends="init" 
            description="Backs up source code to tmp dir">    

        <property name="backup.dir" value="${java.io.tmpdir}/toolbox-backup"/>
        <mkdir dir="${backup.dir}"/>        
        <copy todir="${backup.dir}" >
            <fileset dir="${src}"/>
        </copy>
        
     </target>

    
    <!--=============================--> 
    <!--        CHECKSTYLE           -->
    <!--=============================-->
    <taskdef name="checkstyle" 
             classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
             classpath="build/lib/checkstyle.jar"/>
             
    <target name="checkstyle" 
            depends="init" 
            description="Generates a report of code convention violations.">    

        <!-- directory for checkstyle generated docs -->
        <property 
            name="checkstyle" 
            value="${doc}/checkstyle"/>
        
        <mkdir dir="${checkstyle}"/>
        <delete dir="${checkstyle}/*.*"/> 
    
        <checkstyle 
            failOnViolation="false"    
            properties="${build.conf}/checkstyle.properties">
            
            <fileset dir="${src}" includes="**/*.java"/>                        
            
            <!--formatter type="plain"/-->                                               
            
            <formatter 
                type="xml" 
                toFile="${checkstyle}/checkstyle_report.xml"/>       
            
        </checkstyle>
                     
        <!-- transform the xml report to html -->
        <style basedir  = "${checkstyle}" 
               destdir  = "${checkstyle}"                           
               includes = "checkstyle_report.xml"                                    
               style    = "${build.conf}/checkstyle-noframes.xsl"/>
                
        <exec executable="cmd.exe">
            <arg line="/c start ${checkstyle}/checkstyle_report.html"/>
        </exec>            
                
    </target>


    <!--=============================--> 
    <!--          CVSLOG             -->
    <!--=============================-->
    <target name="cvslog" depends="init">

        <mkdir dir="${doc}/statcvs"/>        
        
        <delete file="${top}/.cvspass" verbose="true"/>
            
        <input message="Enter CVS password:" addproperty="cvs.password"/>    
        
        <property 
            name="cvsroot" 
            value=":pserver:analogue@hemisfear.dyndns.org:2401/k//cvs/cvsrep"/>
        
        <cvspass password = "${cvs.password}"
                 cvsroot  = "${cvsroot}"
                 passfile = "${top}/.cvspass"/>
                 
         <loadfile property="cvspass" srcFile="${top}/.cvspass"/>                 
         <echo message="${cvspass}"/>
                 
         <cvs cvsroot  = "${cvsroot}"
              output   = "${doc}/statcvs/cvs.log"
              command  = "log"
              passfile = "${top}/.cvspass"/>

        <delete file="${top}/.cvspass"/>
    
    </target>


    <!--=============================--> 
    <!--          STATCVS            -->
    <!--=============================-->
    <taskdef name="statcvs" 
             classname="net.sf.statcvs.ant.StatCvsTask"
             classpath="build/lib/statcvs.jar"/>
    
    <target name        = "statcvs" 
            depends     = "init, cvslog"
            description = "Generates a report with CVS statistics">
            
        <statcvs 
            projectName      = "Toolbox"
            projectDirectory = "${top}"
            cvsLogFile       = "${doc}/statcvs/cvs.log"
            outputDirectory  = "${doc}/statcvs"
            cssFile          = "http://statcvs.sf.net/stats/statcvs.css"
            showCredits      = "no"/>
            
    </target>


    <!--=============================--> 
    <!--       JAVA2HTML             -->
    <!--=============================-->
    <taskdef name      = "java2html" 
             classname = "com.java2html.Java2HTMLTask"
             classpath = "build/lib/j2h.jar"/>

    <target name        = "java2html"
            depends     = "init"
            description = "Generates colorized HTML version of the source code useful for browsing">
    
        <mkdir dir="${doc}/java2html"/>
        
        <java2html title       = "Toolbox"
                   simple      = "no"
                   tabsize     = "4"
                   marginsize  = "2"
                   header      = "true"
                   footer      = "false"
                   destination = "${doc}/java2html">
                   
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
            
            <!--javadoc localRef="c:\jdk1.4\docs\api" webRef="http://somewebsite.com/docs/api"/-->
            <!--javadoc localRef="c:\ant\docs\api" webRef="http://somewebsite.com/docs/api"/-->
            
        </java2html>
        
        <copy overwrite = "true" 
              verbose   = "true"
              file      = "${build.conf}/java2html-stylesheet.css" 
              tofile    = "${doc}/java2html/stylesheet.css"/>
        
    </target>    
    
</project>