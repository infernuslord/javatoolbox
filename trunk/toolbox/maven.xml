<!-- ===========================================================================
    
  Maven Base Project Customizations
  
  USAGE:

	You do not invoke this file explicitly. It is picked up by Maven 
	automatically if 'maven.xml' exists in the same directory as the Maven
	project file that is being executed (usually project.xml, but in our case
	base-project.xml). Goals that are defined in this file can be passed to
	maven via the command line to be executed. Execute maven with no command
	line args to print out additional help information on each of the goals.

  PURPOSE:
  
    This file contains additional behavior that is applicable and common to the
    build process of each individual PWSW sub-project (framework, rules, etc).
	
  EXAMPLE:
  
    maven cvs-update	

============================================================================ -->

<project
  default="help"
  xmlns:maven="jelly:maven"
  xmlns:j="jelly:core"
  xmlns:u="jelly:util"
  xmlns:ant="jelly:ant">

	<preGoal name="java:compile"> 
	   <path id="debug.src" location="${basedir}/debug"/> 
	   <maven:addPath id="maven.compile.src.set" refid="debug.src"/> 
	</preGoal> 

	<preGoal name="test:test">

		<!--
	   <ant:pathconvert targetos="windows" property="crap" refid="${maven.dependency.classpath}"/>
	   -->
	   
	   <property name="crap" refid="maven.dependency.classpath"/>
	   <set var="crap" value="${basedir};${crap}"/>
	   <set var="maven.dependency.classpath" value="${crap}"/>
	   <!--path id="maven.dependency.classpath" location="${basedir}"/>
	    -->
	   
	   <echo message="crap=${crap}"/>
	   <echo message="Before Pregoal Test: ${maven.dependency.classpath}"/>
	   <echo message=""/>
	   	   
	   <path id="hacked" location="${basedir}/classes"/>
	   <maven:addPath id="hacked" refid="maven.dependency.classpath"/>
       <j:set var="maven.dependency.classpath" value="${hacked}"/>
       
	   <echo message=""/>
	   <echo message="After Pregoal Test: ${maven.dependency.classpath}"/>
	   <echo message=""/>
       
	</preGoal> 

	<!-- =================================================================== -->
	<!-- D E R E G I S T E R   R E P O R T S                                 -->
	<!-- =================================================================== -->
	<postGoal name="xdoc:register-reports"> 
		<attainGoal name="maven-linkcheck-plugin:deregister"/> 
	</postGoal>
	  
    <postGoal name="xdoc:register-reports"> 
		<attainGoal name="maven-checkstyle-plugin:deregister"/> 
	</postGoal>

	
	<!-- =================================================================== -->
	<!-- C V S - U P D A T E                                                 -->
	<!-- =================================================================== -->
  	<goal name="cvs-update" description="Updates the project from CVS">

    	<mkdir dir="${basedir}/src"/>
    
    	<!-- Only the uiframework module has a 'src' dir built into the cvs structure -->
    	<j:set var="dest" value="${basedir}/src"/>
    	<j:if test="${pom.artifactId == 'uiframework'}">
      		<j:set var="dest" value="${basedir}"/>
    	</j:if>
    
	    <!-- Update from CVS. TODO: Clean checkout -->
	    <cvs command     = "update -d"
	         dest        = "${dest}"
	         failonerror = "false"/>
	         <!-- noexec  = "true" -->         
	  </goal>


	<!-- =================================================================== -->
	<!-- A L I A S E S                                                       -->
	<!-- =================================================================== -->
  	<goal name="compile" description="Alias for java:compile">
    	<attainGoal name="java:compile"/>
  	</goal>
  	
  	<goal name="jar" description="Alias for jar:install">
    	<attainGoal name="jar:install"/>
  	</goal>


	<!-- =================================================================== -->
	<!-- H E L P												             -->
	<!-- =================================================================== -->
	<goal name="help" description="Help for build targets">
		<echo>
================================================================================
                             Project Build Help
================================================================================

Scope:

  Use this maven script when you would like to work on a single project only. 
  Project refers to any of the individual CVS modules. For example framework, 
  rules, or pwsui.

Commands:

  clean         Deletes residual class files, jars, directories generated by 
                the build process.
  compile       Compiles the project only.
  jar           Compiles, unit tests, and jars the project. It them exports 
                the jar to the local maven repository.
  site          Generates project website with reports and all.
  cvs-update    Does a cvs update of the project.
  
Question and Answer:
  
  Q. How do you build from scratch?
  A. maven clean jar
  
  Q. I want to skip over the unit tests.
  A. maven -Dmaven.test.skip=true jar
  
  Q. I want the least possible work done to verify the project compiles.
  A. maven compile
  
  Q. I just want to run one of the unit tests
  A. maven -Dtestcase=foo.bar.ZowieTest test:single
  
  Q. What else can I do with maven?
  A. maven -g
================================================================================
		</echo>
	</goal>
  	
</project>
