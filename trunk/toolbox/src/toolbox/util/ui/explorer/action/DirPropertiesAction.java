package toolbox.util.ui.explorer.action;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import com.jgoodies.forms.builder.DefaultFormBuilder;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import toolbox.forms.SmartComponentFactory;
import toolbox.org.apache.commons.io.find.FileFinder;
import toolbox.org.apache.commons.io.find.FindEvent;
import toolbox.org.apache.commons.io.find.FindListener;
import toolbox.util.DateTimeUtil;
import toolbox.util.SwingUtil;
import toolbox.util.ui.JSmartButton;
import toolbox.util.ui.JSmartDialog;
import toolbox.util.ui.JSmartLabel;
import toolbox.util.ui.action.DisposeAction;
import toolbox.util.ui.explorer.JFileExplorer;

/**
 * DirPropertiesAction is responsible for displaying the selected directories
 * properties.
 */
public class DirPropertiesAction extends AbstractDirAction
{
    private static final Logger logger_ = Logger.getLogger(RenameDirAction.class);


    //--------------------------------------------------------------------------
    // Constructors
    //--------------------------------------------------------------------------

    /**
     * Creates a DirPropertiesAction.
     * 
     * @param explorer File explorer.
     */
    public DirPropertiesAction(JFileExplorer explorer)
    {
        super("Properties..", explorer);
        putValue(MNEMONIC_KEY, new Integer(
            'P'));
    }


    //--------------------------------------------------------------------------
    // ActionListener Interface
    //--------------------------------------------------------------------------

    /**
     * @see java.awt.event.ActionListener#actionPerformed(
     *      java.awt.event.ActionEvent)
     */
    public void actionPerformed(ActionEvent e)
    {
        String path = StringUtils.chomp(
            getExplorer().getCurrentPath(), File.separator);

        File dir = new File(
            path);

        PropertiesDialog dialog = new PropertiesDialog(
            SwingUtil.getFrameAncestor(getExplorer()), dir);

        dialog.setVisible(true);

        //        logger_.debug("Found : " + results.length);
        //        logger_.debug("Total dirs : " + dialog.getNumDirs());
        //        logger_.debug("Total files: " + dialog.getNumFiles());
        //        logger_.debug("Total bytes: " + dialog.getNumBytes());
    }


    //--------------------------------------------------------------------------
    // MyFindListener
    //--------------------------------------------------------------------------

    /**
     * Listens for events generated by the FileFinder and keeps track of file
     * statistics.
     */
    class PropertiesDialog extends JSmartDialog implements FindListener,
        Runnable
    {
        private File dir_;

        private JSmartLabel dirNameLabel_;

        /**
         * Total number of files found.
         */
        private JSmartLabel filesLabel_;

        /**
         * Total number of directories found.
         */
        private JSmartLabel dirsLabel_;

        /**
         * Total number of accumulated bytes for all find found.
         */
        private JSmartLabel sizeLabel_;


        //----------------------------------------------------------------------
        // Constructors
        //----------------------------------------------------------------------

        /**
         * Creates a MyFindListener.
         */
        public PropertiesDialog(Frame parent, File dir)
        {
            super(parent, dir.getName() + " Properties", false);
            dir_ = dir;
            buildView();
            pack();
            SwingUtil.centerWindow(parent, this);
            Thread t = new Thread(
                this);
            t.start();
        }


        //----------------------------------------------------------------------
        // Protected
        //----------------------------------------------------------------------

        /**
         * Constructs the user interface.
         */
        protected void buildView()
        {
            FormLayout layout = new FormLayout(
                "left:pref:g, 10px, left:pref:g", "");
            DefaultFormBuilder builder = new DefaultFormBuilder(layout);
            builder.setComponentFactory(SmartComponentFactory.getInstance());
            builder.setDefaultDialogBorder();

            builder.append("Name", new JSmartLabel(
                dir_.getName()));
            builder.nextLine();

            builder.append("Type", new JSmartLabel(
                "Directory"));
            builder.nextLine();

            builder.append("Location", new JSmartLabel(
                dir_.getAbsolutePath()));
            builder.nextLine();

            sizeLabel_ = new JSmartLabel(
                "0");
            builder.append("Size", sizeLabel_);
            builder.nextLine();

            filesLabel_ = new JSmartLabel(
                "0");
            builder.append("Number of Files", filesLabel_);
            builder.nextLine();

            dirsLabel_ = new JSmartLabel(
                "0");
            builder.append("Number of Directories", dirsLabel_);
            builder.nextLine();

            //            builder.appendRelatedComponentsGapRow();
            //            builder.nextLine();

            builder.append("Created", new JSmartLabel(
                DateTimeUtil.formatToSecond(new Date(
                    dir_.lastModified()))));

            builder.nextLine();

            builder.appendRelatedComponentsGapRow();
            builder.nextLine();

            builder.appendRow("pref");
            CellConstraints cc = new CellConstraints();

            builder.add(new JSmartButton(
                new DisposeAction(
                    "OK", this)), cc.xyw(
                builder.getColumn(), builder.getRow(), 3, "c,f"));

            setContentPane(builder.getPanel());
        }


        //----------------------------------------------------------------------
        // Runnable Interface
        //----------------------------------------------------------------------

        /**
         * @see java.lang.Runnable#run()
         */
        public void run()
        {
            FileFinder finder = new FileFinder();
            Map options = new HashMap();
            //options.put(FileFinder.TYPE, "d");

            finder.addFindListener(this);
            File[] results = finder.find(dir_, options);
        }


        //----------------------------------------------------------------------
        // FindListener Interface
        //----------------------------------------------------------------------

        /**
         * @see toolbox.org.apache.commons.io.find.FindListener#fileFound(
         *      toolbox.org.apache.commons.io.find.FindEvent)
         */
        public void fileFound(FindEvent findEvent)
        {
            File f = findEvent.getFile();
            setNumBytes(getNumBytes() + f.length());

            if (f.isFile())
                setNumFiles(getNumFiles() + 1);
            else if (f.isDirectory())
                setNumDirs(getNumDirs() + 1);
            else
                logger_.debug("Not counting " + f.getAbsolutePath());
        }


        /**
         * @see toolbox.org.apache.commons.io.find.FindListener#directoryFinished(
         *      toolbox.org.apache.commons.io.find.FindEvent)
         */
        public void directoryFinished(FindEvent findEvent)
        {
            // NOOP
        }


        /**
         * @see toolbox.org.apache.commons.io.find.FindListener#directoryStarted(
         *      toolbox.org.apache.commons.io.find.FindEvent)
         */
        public void directoryStarted(FindEvent findEvent)
        {
            setNumDirs(getNumDirs() + 1);
        }


        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        public long getNumBytes()
        {
            return toLong(sizeLabel_.getText());
        }


        public int getNumDirs()
        {
            return toInt(dirsLabel_.getText());
        }


        public int getNumFiles()
        {
            return toInt(filesLabel_.getText());
        }


        protected void setNumBytes(long numBytes)
        {
            sizeLabel_.setText(format(numBytes));
        }


        protected void setNumDirs(int numDirs)
        {
            dirsLabel_.setText(format(numDirs));
        }


        protected void setNumFiles(int numFiles)
        {
            filesLabel_.setText(format(numFiles));
        }
        
        //--------------------------------------------------------------------------
        //
        //--------------------------------------------------------------------------
        
        int toInt(String s)
        {
            return Integer.parseInt(StringUtils.replace(s, ",", ""));
        }

        long toLong(String s)
        {
            return Long.parseLong(StringUtils.replace(s, ",", ""));
        }
        
        String format(int i)
        {
            return DecimalFormat.getInstance().format(i);            
        }
        
        String format(long l)
        {
            return DecimalFormat.getInstance().format(l);            
        }
    }
}